# You'll need to adjust the paths in the Passenger config depending on which OS
# you're using, as well as the installed version of Passenger.

# Debian/Ubuntu:
#LoadModule passenger_module /var/lib/gems/1.8/gems/passenger-4.0.x/ext/apache2/mod_passenger.so
#PassengerRoot /var/lib/gems/1.8/gems/passenger-4.0.x
#PassengerRuby /usr/bin/ruby1.8

# RHEL/CentOS:
#LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-4.0.x/ext/apache2/mod_passenger.so
#PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-4.0.x
#PassengerRuby /usr/bin/ruby

   LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-5.0.23/buildout/apache2/mod_passenger.so
   <IfModule mod_passenger.c>
     PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-5.0.23
     PassengerDefaultRuby /usr/bin/ruby
   </IfModule>


# And the passenger performance tuning settings:
# Set this to about 1.5 times the number of CPU cores in your master:
PassengerMaxPoolSize 6
# Recycle master processes after they service 1000 requests
PassengerMaxRequests 500
# Stop processes if they sit idle for 10 minutes
PassengerPoolIdleTime 300

Listen 8140
<VirtualHost *:8140>
    # Make Apache hand off HTTP requests to Puppet earlier, at the cost of
    # interfering with mod_proxy, mod_rewrite, etc. See note below.
    PassengerHighPerformance On

    SSLEngine On

    # Only allow high security cryptography. Alter if needed for compatibility.
   SSLProtocol ALL -SSLv2 -SSLv3
   SSLCipherSuite EDH+CAMELLIA:EDH+aRSA:EECDH+aRSA+AESGCM:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:+CAMELLIA256:+AES256:+CA                              MELLIA128:+AES128:+SSLv3:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!IDEA:!ECDSA:kEDH:CAMELLIA256-SHA:AES256-SH                              A:CAMELLIA128-SHA:AES128-SHA
  SSLHonorCipherOrder     on

    SSLCertificateFile      /var/lib/puppet/ssl/certs/puppet1.paosin.local.pem
    SSLCertificateKeyFile   /var/lib/puppet/ssl/private_keys/puppet1.paosin.local.pem
   SSLCertificateChainFile /var/lib/puppet/ssl/ca/ca_crt.pem
   SSLCACertificateFile    /var/lib/puppet/ssl/ca/ca_crt.pem
#  SSLCARevocationFile     /var/lib/puppet/ssl/ca/ca_crl.pem
    SSLVerifyClient         optional
    SSLVerifyDepth          1
    SSLOptions              +StdEnvVars +ExportCertData

    # Apache 2.4 introduces the SSLCARevocationCheck directive and sets it to none
        # which effectively disables CRL checking. If you are using Apache 2.4+ you must
    # specify 'SSLCARevocationCheck chain' to actually use the CRL.

    # These request headers are used to pass the client certificate
    # authentication information on to the puppet master process
    RequestHeader set X-SSL-Subject %{SSL_CLIENT_S_DN}e
    RequestHeader set X-Client-DN %{SSL_CLIENT_S_DN}e
    RequestHeader set X-Client-Verify %{SSL_CLIENT_VERIFY}e
    # Obtain Authentication Information from Client Request Headers
    PassengerEnabled On

    #SetEnvIf X-Client-Verify "(.*)" SSL_CLIENT_VERIFY=$1
    #SetEnvIf X-SSL-Client-DN "(.*)" SSL_CLIENT_S_DN=$1
    #SetEnvIf HTTP_X_CLIENT_VERIFY  "(.*)" HTTP_X_CLIENT_VERIFY=$1
    #SetEnvIf HTTP_X_CLIENT_DN "(.*)" HTTP_X_CLIENT_DN=$1
   # SetEnvIf X-Client-DN "(.*)" X-Client-DN=$1
   # SetEnvIf X-Client-Cert "(.*)" X-Client-Cert=$1

    DocumentRoot /usr/share/puppet/rack/puppetmasterd/public

    <Directory /usr/share/puppet/rack/puppetmasterd/>
      Options None
      AllowOverride None
      # Apply the right behavior depending on Apache version.
      <IfVersion < 2.4>
        Order allow,deny
        Allow from all
      </IfVersion>
      <IfVersion >= 2.4>
        Require all granted
      </IfVersion>
    </Directory>

    ErrorLog /var/log/httpd/puppet1.paosin.local_ssl_error.log
    CustomLog /var/log/httpd/puppet1.paosin.local_ssl_access.log combined
</VirtualHost>